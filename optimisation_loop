import pandas as pd
import numpy as np
import time
from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.core.problem import Problem
from pymoo.core.problem import ElementwiseProblem
from pymoo.optimize import minimize
from pymoo.visualization.scatter import Scatter
from pymoo.factory import get_termination
from pymoo.optimize import minimize
from pymoo.factory import get_performance_indicator

# read in the Cesarone solved dataset ----------------------------
df_cs = pd.read_fwf(
    'RetRisk31_SolVal.txt', sep=" ",header=None)

# split the single column
df_cs['return'] = [d.split()[0] for d in df_cs[0]]
df_cs['risk value'] = [d.split()[2] for d in df_cs[0]] # change for different values of k (k=2->1, k=3->2, k=10->9)
del df_cs[0]
df_cs = df_cs.reset_index(drop=True)

# correct variable type
df_cs = df_cs.astype(float)

# create df for both variables (for objective space plot)
mean_return_cs = df_cs['return']
variance_of_return_cs = df_cs['risk value']

# swap columns
columns_titles = ["risk value","return"]
df_cs = df_cs.reindex(columns=columns_titles)

df_cs = np.asarray(df_cs)

# read in the unconstrained dataset ------------------------------
df_un = pd.read_fwf(
    'portef1.txt', sep=" ",header=None)

# assign the columns to seperate dataframes (for objective space plot)
mean_return_un = df_un[0]
variance_of_return_un = df_un[1]

# name columns
df_un = df_un.rename(columns={0 : 'returns'})
df_un = df_un.rename(columns={1 : 'risk values'})

# swap columns
columns_titles1 = ["risk values","returns"]
df_un = df_un.reindex(columns=columns_titles1)

df_un = np.asarray(df_un)

# read in the chosen dataset -------------------------------------
df = pd.read_fwf(
    'port1.txt', sep=" ",header=None)
#print(df)

# define n as the number of assets in the dataset
n = int(df[0].iloc[0])

# split the dataframe into two data frames
df_RR = df.iloc[1:n+1]
df_CV = df.iloc[n+1:]
#print(df_RR)

#split the single column into two and give headings to both
df_RR['mean returns'] = [d.split()[0] for d in df_RR[0]]
df_RR['sd'] = [d.split()[1] for d in df_RR[0]]
del df_RR[0]
df_RR = df_RR.reset_index(drop=True)
#print(df_RR)

# split the single column into three and give headings to each
df_CV['i'] = [d.split()[0] for d in df_CV[0]]
df_CV['j'] = [d.split()[1] for d in df_CV[0]]
df_CV['correlation'] = [d.split()[2] for d in df_CV[0]]
del df_CV[0]
df_CV = df_CV.reset_index(drop=True)
#print(df_CV)

#convert variables to correct type (numeric)
df_CV = df_CV.apply(pd.to_numeric)
df_RR = df_RR.apply(pd.to_numeric)

# create correlation matrix
df2 = df_CV.pivot(index='i', columns='j', values='correlation')
df3 = np.triu(df2)
iu = np.triu_indices(n,1)
il = (iu[1],iu[0])
df3[il]=df3[iu]

#create sd array
df_std = np.asarray(df_RR['sd'])

#create covariance matrix
df4 = np.multiply(df3, df_std)
df_cov = np.multiply(df4, df_std)

#create mean returns array
df_mr = np.asarray(df_RR['mean returns'])

#if needed
#df_un = np.delete(df_un, 2000, 0)

tol = 1e-10
v = df_cov
m = df_mr
K = 2

# initial population for use with cardinality constraint:
# vectors with n-K zeros
A0 = np.zeros((100,n))
for i in range(100):
    A0[i,:K]=np.random.rand(K)
    A0[i]=A0[i]/np.sum(A0[i])
    np.random.shuffle(A0[i])

# create problem and constraint functions
class MyProblem(ElementwiseProblem): 

    def __init__(self, m, v):
        super().__init__(n_var=n,
                         n_obj=2,
                         n_constr=1,
                         xl=np.array([0 for _ in range(n)]),
                         xu=np.array([1 for _ in range(n)]))
        self.m = m
        self.v = v
        
    def _evaluate(self, x, out, *args, **kwargs):
        x = x/np.sum(x)
        f1 = np.dot(np.array(x).T, (np.dot(self.v, np.array(x))))
        #f1 = np.dot(np.array(x), (np.dot(self.v, np.array(x))))
        f2 = -(np.dot(np.array(x), self.m))  # max - = min +


        #g1 = np.sum(np.array(x))-1
        g2 = sum(i > tol for i in x)-K
        
        #out["F"] = np.column_stack([f1, f2])
        out["F"] = [f1,f2]
        out["G"] = [g2]
        
problem = MyProblem(m,v)

#set initial population size
algorithm = NSGA2(pop_size=100, sampling=A0)

termination = get_termination("n_gen", 20000) # port1 = 20000, port2-4 = 30000, port5 = 50000
        
# create pareto front function for both df_un and df_cs
def _calc_pareto_front():
    unconstrained = df_un
    cesarone = df_cs
    return unconstrained, cesarone

pf = _calc_pareto_front()
pf_un = pf[0]
pf_cs = pf[1]
        

results = [[] for l in range(3)]

for r in range(30):       
   # set start time
   start_time = time.time()
   
   res = minimize(problem,
                  algorithm,
                  termination,
                  seed=None,
                  save_history=True,
                  verbose=True)

   #X = res.X
   #sum_of_rows = X.sum(axis=1)
   #X = X / sum_of_rows[:, np.newaxis]
   F = np.abs(res.F)

   # set end time
   end_time = time.time()
   
   #F = np.abs(F)

   # save IGD value from unconstrained
   igd_un = get_performance_indicator("igd", pf_un)
   print_IGD_un = igd_un.do(F)

   # save IGD value from Cesarone solutions
   igd_cs = get_performance_indicator("igd", pf_cs)
   print_IGD_cs = igd_cs.do(F)
   
   #save time
   print_time = end_time - start_time
   
   #add outcomes to results
   results[0].append(print_IGD_un)
   results[1].append(print_IGD_cs)
   results[2].append(print_time)
   

#write results file   
with open("results.txt", "w") as output:
    output.write(str(results))

#read in results file
data = pd.read_fwf(
    'results.txt', sep=" ",header=None)


data = data.transpose()

#clean symbols from data
data = data.replace('\[', '', regex=True)
data = data.replace('\]', '', regex=True)
data = data.replace('\,', '', regex=True)

#save each variable to a dataframe
data_un = data.iloc[:30,:]
data_cs = data.iloc[30:60,:]
data_time = data.iloc[60:,:]

data_un = data_un.reset_index(drop=True)
data_cs = data_cs.reset_index(drop=True)
data_time = data_time.reset_index(drop=True)

#name dataframe columns
data_un = data_un.rename(columns={0 : 'Unconstrained IGD'})
data_cs = data_cs.rename(columns={0 : 'Cesarone IGD'})
data_time = data_time.rename(columns={0 : 'Time (s)'})

#concatenate dataframes into one dataframe
table = pd.concat([data_un, data_cs, data_time], axis=1)

#save dataframe into txt file
with open("port1_results_k2.txt", "w") as output:
    output.write(str(table))
