import numpy
import pandas as pd
import numpy as np
import time

# read in the Cesarone solved dataset ----------------------------
df_cs = pd.read_fwf(
    'RetRisk31_SolVal.txt', sep=" ",header=None)

# split the single column
df_cs['return'] = [d.split()[0] for d in df_cs[0]]
df_cs['risk value'] = [d.split()[9] for d in df_cs[0]]
del df_cs[0]
df_cs = df_cs.reset_index(drop=True)

# correct variable type
df_cs = df_cs.astype(float)

# create df for both variables (for objective space plot)
mean_return_cs = df_cs['return']
variance_of_return_cs = df_cs['risk value']

# swap columns
columns_titles = ["risk value","return"]
df_cs = df_cs.reindex(columns=columns_titles)

df_cs = np.asarray(df_cs)

# read in the unconstrained dataset ------------------------------
df_un = pd.read_fwf(
    'portef1.txt', sep=" ",header=None)

# assign the columns to seperate dataframes (for objective space plot)
mean_return_un = df_un[0]
variance_of_return_un = df_un[1]

# name columns
df_un = df_un.rename(columns={0 : 'returns'})
df_un = df_un.rename(columns={1 : 'risk values'})

# swap columns
columns_titles1 = ["risk values","returns"]
df_un = df_un.reindex(columns=columns_titles1)

df_un = np.asarray(df_un)

# read in the chosen dataset -------------------------------------
df = pd.read_fwf(
    'port1.txt', sep=" ",header=None)
#print(df)

# define n as the number of assets in the dataset
n = int(df[0].iloc[0])

# split the dataframe into two data frames
df_RR = df.iloc[1:n+1]
df_CV = df.iloc[n+1:]
#print(df_RR)

#split the single column into two and give headings to both
df_RR['mean returns'] = [d.split()[0] for d in df_RR[0]]
df_RR['sd'] = [d.split()[1] for d in df_RR[0]]
del df_RR[0]
df_RR = df_RR.reset_index(drop=True)
#print(df_RR)

# split the single column into three and give headings to each
df_CV['i'] = [d.split()[0] for d in df_CV[0]]
df_CV['j'] = [d.split()[1] for d in df_CV[0]]
df_CV['correlation'] = [d.split()[2] for d in df_CV[0]]
del df_CV[0]
df_CV = df_CV.reset_index(drop=True)
#print(df_CV)

#convert variables to correct type (numeric)
df_CV = df_CV.apply(pd.to_numeric)
df_RR = df_RR.apply(pd.to_numeric)

# create correlation matrix
df2 = df_CV.pivot(index='i', columns='j', values='correlation')
df3 = np.triu(df2)
iu = np.triu_indices(n,1)
il = (iu[1],iu[0])
df3[il]=df3[iu]

#create sd array
df_std = np.asarray(df_RR['sd'])

#create covariance matrix
df4 = np.multiply(df3, df_std)
df_cov = np.multiply(df4, df_std)

#create mean returns array
df_mr = np.asarray(df_RR['mean returns'])

#if needed
#df_un = np.delete(df_un, 2000, 0)

from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.core.problem import Problem
from pymoo.core.problem import ElementwiseProblem
from pymoo.optimize import minimize
from pymoo.visualization.scatter import Scatter

tol = 1e-10
v = df_cov
m = df_mr
K = 2
#print("v=", v, "m=", m, "K=", K, "n=", n)

# =============================================================================
# # Examples
# x=np.ones(n)/n
# print("x=", x, np.sum(x))
# print("Risk = ", np.sum(np.dot(x.T,(np.dot(v,x)))))
# print(np.dot(x.T,(np.dot(v,x))).shape)
# print(x.T.shape, np.dot(v,x).shape)
# print("Return = ", np.dot(x,m))
# print(len(sum(np.nonzero(x))))
# =============================================================================

# initial population for use with cardinality constraint:
# vectors with n-K zeros
A0 = np.zeros((100,n))
for i in range(100):
    A0[i,:K]=np.random.rand(K)
    A0[i]=A0[i]/np.sum(A0[i])
    np.random.shuffle(A0[i])

# set start time
start = time.time()

# create problem and constraint functions
class MyProblem(ElementwiseProblem): ### changed

    def __init__(self, m, v):
        super().__init__(n_var=n,
                         n_obj=2,
                         n_constr=1,
                         xl=np.array([0 for _ in range(n)]),
                         xu=np.array([1 for _ in range(n)]))
        self.m = m
        self.v = v
        
    def _evaluate(self, x, out, *args, **kwargs):
        x = x/np.sum(x)
        f1 = np.dot(np.array(x).T, (np.dot(self.v, np.array(x))))
        #f1 = np.dot(np.array(x), (np.dot(self.v, np.array(x))))
        f2 = -(np.dot(np.array(x), self.m))  # max - = min +


        #g1 = np.sum(np.array(x))-1
        g2 = sum(i > tol for i in x)-K
        
        #out["F"] = np.column_stack([f1, f2])
        out["F"] = [f1,f2]
        out["G"] = [g2]
        
problem = MyProblem(m,v)

#set initial population size
algorithm = NSGA2(pop_size=100, sampling=A0)

# create termination criteria
from pymoo.factory import get_termination

termination = get_termination("n_gen", 20000) # port1 = 20000, port2-4 = 30000, port5 = 50000

# initialise minimise function
from pymoo.optimize import minimize

res = minimize(problem,
               algorithm,
               termination,
               seed=None,
               save_history=True,
               verbose=True)

X = res.X
sum_of_rows = X.sum(axis=1)
X = X / sum_of_rows[:, np.newaxis]
F = np.abs(res.F)

# set end time
end = time.time()

#print EF plot
import matplotlib.pyplot as plt
plt.figure(figsize=(7, 5))
plt.scatter(variance_of_return_un, mean_return_un, s=30, facecolors='none', edgecolors='red', label='Unconstrained (Beasley)')
plt.scatter(variance_of_return_cs, mean_return_cs, s=30, facecolors='none', edgecolors='limegreen', label='K=2 (Cesarone)')
plt.scatter(F[:, 0], F[:, 1], s=30, facecolors='none', edgecolors='blue', label='K=2 (pymoo)')
plt.title("Objective Space")
plt.xlabel("Risk")
plt.ylabel("Expected Return")
plt.legend(loc='lower right', frameon=True)
plt.show()

hist = res.history

n_evals = np.array([e.evaluator.n_eval for e in res.history])
opt = np.array([e.opt[0].F[0] for e in res.history])


n_evals = []             # corresponding number of function evaluations
hist_F = []              # the objective space values in each generation
#hist_cv = []             # constraint violation in each generation
#hist_cv_avg = []         # average constraint violation in the whole population

for algo in hist:

    # store the number of function evaluations
    n_evals.append(algo.evaluator.n_eval)

    # retrieve the optimum from the algorithm
    opt = algo.opt

    # store the least contraint violation and the average in each population
#    hist_cv.append(opt.get("CV").min())
#    hist_cv_avg.append(algo.pop.get("CV").mean())

    # filter out only the feasible and append and objective space values
    feas = np.where(opt.get("feasible"))[0]
    hist_F.append(opt.get("F")[feas])

approx_ideal = F.min(axis=0)
approx_nadir = F.max(axis=0)


from pymoo.indicators.hv import Hypervolume

metric = Hypervolume(ref_point= np.array([1.1, 1.1]),
                     norm_ref_point=False,
                     zero_to_one=True,
                     ideal=approx_ideal,
                     nadir=approx_nadir)

hv = [metric.do(_F) for _F in hist_F]

#print hypervolume plot
plt.figure(figsize=(7, 5))
plt.plot(n_evals, hv,  color='black', lw=0.7, label="Avg. CV of Pop")
plt.scatter(n_evals, hv,  facecolor="none", edgecolor='black', marker="p")
plt.title("Convergence")
plt.xlabel("Function Evaluations")
plt.ylabel("Hypervolume")
plt.show()

# print run time
print(end - start)


# create pareto front function for both df_un and df_cs
def _calc_pareto_front():
    unconstrained = df_un
    cesarone = df_cs
    return unconstrained, cesarone

pf = _calc_pareto_front()
pf_un = pf[0]
pf_cs = pf[1]

from pymoo.factory import get_performance_indicator

# print IGD value from unconstrained
igd_un = get_performance_indicator("igd", pf_un)
print("IGD value of unconstrained", igd_un.do(F))

# print IGD value from Cesarone solutions
igd_cs = get_performance_indicator("igd", pf_cs)
print("IGD value of cesarone solutions", igd_cs.do(F))

#save EF data
np.savetxt('port1_EF_k2.txt', F)
